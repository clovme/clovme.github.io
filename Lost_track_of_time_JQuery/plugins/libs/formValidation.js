!function($,window,document,undefined){var _form=function(t,e){this.form=t,this.csrf=null,this.defaults={},this.options=$.extend({},this.defaults,e),this.methods={GET:"GET",POST:"POST",HEAD:"HEAD",PUT:"PUT",DELETE:"DELETE",CONNECT:"CONNECT",OPTIONS:"OPTIONS",TRACE:"TRACE"}};_form.prototype={init:function(){var t=this,e=t.options.submitBtn;return t.for_form(),t.initParams(),t.enterSend(),t.getCsrfTooken(),t.data={required:t.func.required,min:t.func.minOrMax,max:t.func.minOrMax,length:t.func.lengths,rules:t.func.rules,equal:t.func.equal,phone:t.func.mobile,email:t.func.email,idcard:t.func.IdCard,password:t.func.password,url:t.func.url},e&&$(e).on("click",function(){t.clickValidation()}),this},enterSend:function(){var r=this;$("#"+r.form[0].id).off("keydown.t").on("keydown.t",function(t){var e=t||window.event;e.ctrlKey&&13===e.keyCode?r.clickValidation():13===e.keyCode&&r.clickValidation()})},attrLength:function(t){var e=t.attr("data-length");if(e){var r=e.split("-");if(1===r.length&&(t.attr("minlength",r[0]),t.attr("maxlength",r[0])),2===r.length){var n=r[r.length-1];"*"===n?t.attr("minlength",r[0]):(t.attr("minlength",r[0]),t.attr("maxlength",n))}}},events:function(r,n){var a=!0;if("radio"!==n.attr("type")&&"checkbox"!==n.attr("type"))$.each(n[0].dataset,function(t,e){"ruleMessage"!==t&&(r.data[t](n)||(r.errFunc[t](n,r),a=r.data[t](n)),a&&r.msg.success(n))});else{if("checkbox"===n.attr("type")){var t=n.is(":checked");t||(r.errFunc.required(n,r),a=t),a&&r.msg.success(n)}"radio"===n.attr("type")&&console.log(n)}},for_form:function(){var r=this;$.each(r.form[0],function(t,e){""!==$(e)[0].name&&(r.attrLength($(e)),$(e).on("input propertychange",function(){r.events(r,$(e))}),$(e).on("blur",function(){r.events(r,$(e))}))})},randomNum:function(t,e){switch(arguments.length){case 1:return parseInt(Math.random()*t+1,10);case 2:return parseInt(Math.random()*(e-t+1)+t,10);default:return 0}},initParams:function(){var t=this,e=t.options.sends===undefined||t.options.sends,r=t.methods[(t.options.method?t.options.method:"POST").trim().toUpperCase()];t.url=t.options.url?t.options.url:t.form[0].action,t.method=r!==undefined?r:"POST",t.async=!0!==t.options.async&&!1!==t.options.async||t.options.async,t.sends=!0!==e&&!1!==e||e,""!==t.form[0].id&&t.form[0].id!==undefined||(t.form[0].id=t.formId())},formId:function(){for(var t="";;){var e="form-"+this.randomNum(4e3,5e3),r=[];if($.each($("form"),function(t,e){r.push(e.id)}),-1===$.inArray(e,r)){t=e;break}}return t}},_form.prototype.errFunc={required:function(t,e){e.msg.error(t,t.attr("data-required"))},min:function(t,e){e.msg.error(t,"最小值为:"+t.attr("data-min"))},max:function(t,e){e.msg.error(t,"最大值为:"+t.attr("data-max"))},length:function(t,e){var r=t.attr("data-length").split("-");if(1===r.length&&e.msg.error(t,"最多最少输入"+r[0]+"位"),2===r.length)if("*"===r[r.length-1])e.msg.error(t,"最少输入"+r[0]+"位");else{var n=t.attr("data-length");e.msg.error(t,"输入字符长度["+n+"]位")}},rules:function(t,e){e.msg.error(t,t.attr("data-rule-message"))},equal:function(t,e){e.msg.error(t,"输入不一致！")},phone:function(t,e){e.msg.error(t,t.attr("data-phone"))},email:function(t,e){e.msg.error(t,t.attr("data-email"))},idcard:function(t,e){e.msg.error(t,t.attr("data-idcard"))},url:function(t,e){e.msg.error(t,t.attr("data-url"))},password:function(t,e){e.msg.error(t,t.attr("data-password"))}},_form.prototype.clickValidation=function(){var n=this,a=!0;$.each(n.form[0],function(t,r){if(""!==$(r)[0].name)if("radio"!==$(r).attr("type")&&"checkbox"!==$(r).attr("type"))$.each($(r)[0].dataset,function(t,e){"ruleMessage"===t||n.data[t]($(r),n)||(n.errFunc[t]($(r),n),a=n.data[t]($(r)))});else{if("checkbox"===$(r).attr("type")){var e=$(r).is(":checked");e||(n.errFunc.required($(r),n),a=e)}"radio"===$(r).attr("type")&&console.log(r)}}),a&&n.sends&&n.sendData()},_form.prototype.func={required:function(t){var e=t.val();return""!==e&&null!=e},minOrMax:function(t){var e=t.val(),r=parseInt(t.attr("data-min")),n=parseInt(t.attr("data-max"));if(e=parseInt(e)){if(isNaN(e)||e<r)return!1;if(!isNaN(e)&&n<e)return!1}return!0},lengths:function(t){var e=t.val(),r=t.attr("data-length").split("-");if(""!==e&&1===r.length){var n=parseInt(r);if(e.length!==n)return!1}else if(""!==e&&2===r.length)if("*"===r[1]){var a=parseInt(r[0]);if(e.length<a)return!1}else{var o=parseInt(r[0]),i=parseInt(r[1]);if(e.length<o||e.length>i)return!1}return!0},rules:function(objects){var value=objects.val(),rule=objects.attr("data-rules");return rule=new RegExp(eval(rule)),!(""!==value&&!rule.test(value))},equal:function(t){return t.val()===$(t.attr("data-equal")).val()},mobile:function(t){var e=t.val();return!(""!==e&&!/^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\d{8}$/.test(e)&&!/^(0\d{2,3}\d{7,8}|0\d{2,3}-)\d{7,8}$/.test(e))},email:function(t){var e=t.val();return!(""!==e&&!/^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$/.test(e))},password:function(t){var e=t.val();return!(""!==e&&!/^[a-zA-Z0-9\.\_\~\!\@\#\$\%\^\&\*\(\)\+\-\=]{6,16}$/.test(e))},IdCard:function(t){var e=t.val();return!(""!==e&&!/^([1-9]\d{5}[1]\d{3}(0[1-9]|1[0-2])(0[1-9]|[1-2]\d|3[0-1])\d{3}[0-9xX]|[1-9]\d{5}\d{2}(0[1-9]|1[0-2])(0[1-9]|[1-2]\d|3[0-1])\d{3})$/.test(e))},url:function(t){var e=t.val();return!(""!==e&&!/^https?:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/.test(e))}},_form.prototype.getCsrfTooken=function(){if(document.cookie&&""!==document.cookie)for(var t=document.cookie.split(";"),e=0;e<t.length;e++){var r=t[e].trim().split("=");"csrftoken"===r[0]&&(this.csrf=r[1]);break}},_form.prototype.formData=function(){var t=this,r={},e=t.form[0];return $(e).find('input[type="file"]').length<=0?($.each($(t.form[0]).serializeArray(),function(t,e){r[e.name]=e.value}),!t.csrf&&r.csrfmiddlewaretoken&&(t.csrf=r.csrfmiddlewaretoken),delete r.csrfmiddlewaretoken,$.each(t.options.data,function(t,e){r[t]=e}),r=JSON.stringify(r)):(r=new FormData(e),!t.csrf&&r.has("csrfmiddlewaretoken")&&(t.csrf=r.get("csrfmiddlewaretoken")),r.delete("csrfmiddlewaretoken"),$.each(t.options.data,function(t,e){r.append(t,e)})),r},_form.prototype.sendData=function(){var e=this,t=e.formData(),r=new XMLHttpRequest;r.open(e.method,e.url,e.async),r.setRequestHeader("X-CSRFToken",e.csrf),r.setRequestHeader("x-requested-with","XMLHttpRequest"),$(e.form[0]).find('input[type="file"]').length<=0&&r.setRequestHeader("Content-Type","application/json"),r.onreadystatechange=function(){if(4===r.readyState)if(200===r.status){if(e.options.success)try{e.options.success($.parseJSON(r.responseText))}catch(t){e.options.success(r.responseText)}}else if(e.options.error)try{e.options.success($.parseJSON(r.responseText))}catch(t){e.options.success(r.responseText)}},r.send(t)},_form.prototype.msg={error:function(t,e){if("checkbox"!==$(t).attr("type")&&"radio"!==$(t).attr("type")){var r=$(t.siblings()[0]);r.attr({"data-trigger":"manual","data-placement":"left","data-original-title":e}).tooltip("show"),r.children(".input-group-text").css({"border-color":"#EF5350",color:"#EF5350"}),t.attr("check",!1).css({"border-color":"#EF5350","background-color":"#FFCDD2"})}else"checkbox"===$(t).attr("type")&&t.attr({check:!1,"data-trigger":"manual","data-placement":"left","data-original-title":e}).tooltip("show")},success:function(t){if("checkbox"!==$(t).attr("type")&&"radio"!==$(t).attr("type")){var e=$(t.siblings()[0]);e.removeAttr("data-trigger"),e.removeAttr("data-placement"),e.removeAttr("data-original-title"),e.children(".input-group-text").removeAttr("style"),e.tooltip("hide"),e.find(".fa").css("color","#28a745"),t.attr("check",!0).css({"border-color":"#28a745","background-color":"#FFF"})}else"checkbox"===$(t).attr("type")&&(t.attr("check",!0),t.removeAttr("data-trigger"),t.removeAttr("data-placement"),t.removeAttr("data-original-title"),t.tooltip("hide"))}},$.fn.form=function(t){return new _form(this,t).init()}}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
